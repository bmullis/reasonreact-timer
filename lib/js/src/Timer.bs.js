// Generated by BUCKLESCRIPT VERSION 5.0.4, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Caml_format = require("bs-platform/lib/js/caml_format.js");

function Timer$Button(Props) {
  var label = Props.label;
  var onClick = Props.onClick;
  return React.createElement("button", {
              className: "timer__button timer__" + (String(label) + ""),
              onClick: onClick
            }, label);
}

var Button = /* module */[/* make */Timer$Button];

var updateTitle = (
  function updateTitle(remaining) {
    document.title = "⏰ " + remaining + " ⏰";
  });

function padNumber(numString) {
  if (Caml_format.caml_int_of_string(numString) < 10) {
    return "0" + numString;
  } else {
    return numString;
  }
}

function formatTime(seconds) {
  var mins = seconds / 60 | 0;
  var minsString = padNumber(String(mins));
  var seconds$1 = seconds % 60;
  var secondsString = padNumber(String(seconds$1));
  return minsString + (":" + secondsString);
}

function Timer(Props) {
  var match = React.useReducer((function (state, action) {
          switch (action) {
            case 0 : 
                return /* record */[
                        /* seconds */state[/* seconds */0],
                        /* isTicking */true
                      ];
            case 1 : 
                return /* record */[
                        /* seconds */state[/* seconds */0],
                        /* isTicking */false
                      ];
            case 2 : 
                Curry._1(updateTitle, formatTime(30));
                return /* record */[
                        /* seconds */30,
                        /* isTicking */state[/* isTicking */1]
                      ];
            case 3 : 
                var match = state[/* isTicking */1] && state[/* seconds */0] > 0;
                if (match) {
                  Curry._1(updateTitle, formatTime(state[/* seconds */0] - 1 | 0));
                  return /* record */[
                          /* seconds */state[/* seconds */0] - 1 | 0,
                          /* isTicking */state[/* isTicking */1]
                        ];
                } else {
                  return /* record */[
                          /* seconds */state[/* seconds */0],
                          /* isTicking */false
                        ];
                }
            
          }
        }), /* record */[
        /* seconds */30,
        /* isTicking */false
      ]);
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          var timerId = setInterval((function (param) {
                  return Curry._1(dispatch, /* Tick */3);
                }), 1000);
          return (function (param) {
                    clearInterval(timerId);
                    return /* () */0;
                  });
        }), ([]));
  var match$1 = state[/* isTicking */1];
  var tmp;
  if (match$1) {
    tmp = React.createElement("div", {
          className: "timer__buttons"
        }, React.createElement(Timer$Button, {
              label: "stop",
              onClick: (function (_event) {
                  return Curry._1(dispatch, /* Stop */1);
                })
            }));
  } else {
    var match$2 = state[/* seconds */0] === 30;
    tmp = React.createElement("div", {
          className: "timer__butons"
        }, match$2 ? React.createElement(Timer$Button, {
                label: "start",
                onClick: (function (_event) {
                    return Curry._1(dispatch, /* Start */0);
                  })
              }) : React.createElement(React.Fragment, undefined, React.createElement(Timer$Button, {
                    label: "start",
                    onClick: (function (_event) {
                        return Curry._1(dispatch, /* Start */0);
                      })
                  }), React.createElement(Timer$Button, {
                    label: "reset",
                    onClick: (function (_event) {
                        return Curry._1(dispatch, /* Reset */2);
                      })
                  })));
  }
  return React.createElement("div", {
              className: "container"
            }, React.createElement("div", {
                  className: "timer"
                }, React.createElement("p", {
                      className: "timer__text"
                    }, formatTime(state[/* seconds */0])), tmp));
}

var make = Timer;

exports.Button = Button;
exports.updateTitle = updateTitle;
exports.padNumber = padNumber;
exports.formatTime = formatTime;
exports.make = make;
/* updateTitle Not a pure module */
